bundlesPath: ./path/to/bundles

bundleConfigFormats:
  - .yaml
  - .js
  - .json

localConfigPath: ./.gulpw

localConfigBackupPath: ./.gulpw/backups

staticTasks:
  "config":
    constructorLocation: ./task-proxies/ConfigAdapter
    help: ''

  "deploy-config":
    constructorLocation: ./task-proxies/DeployConfigAdapter
    help: ''

  "bundle-config":
    constructorLocation: ./task-proxies/BundleConfigAdapter
    help: ''

tasks:

  # Browserify Defaults
  browserify:
    constructorLocation: ./bundle/task-proxies/BrowserifyAdapter

  # Build Task (Looks through {bundle-alias}.yaml file and runs
  # all tasks that are not in the `ignoredTasks` array in this config.
  build:
    constructorLocation: ./bundle/task-proxies/BuildAdapter

    prelimTasks:
      - mocha
      - jasmine

    ignoredTasks:
      - clean
      - deploy
      - jshint
      - csslint

    help: ""


  clean:
    constructorLocation: ./bundle/task-proxies/CleanAdapter
    allowedFileTypes:
      - js
      - css
      - html
    help: ""

  compass:
    constructorLocation: ./bundle/task-proxies/CompassAdapter
    compassProjectRoot: null # config.rb home
    help: ""

  copy:
    constructorLocation: ./bundle/task-proxies/CopyAdapter
    help: ""

  csslint:
    constructorLocation: ./bundle/task-proxies/CssLintAdapter
    csslintrc: null
    help: ""

  # Deploy Task
  deploy:
    # @todo add a flag for ignoring the deployment of artifacts
    constructorLocation: ./bundle/task-proxies/DeployAdapter

    # Whether to deploy files using unix paths (useful if you're on Windows and need to deploy to a *nix type server)
    deployUsingUnixStylePaths: true

    # Options written by `gulpw deploy-config`
    developingDomain: null
    hostnamePrefixFolder: null
    hostnamePrefix: null
    hostname: null
    port: 22
    username: null
    password: null
    publickeyPassphrase: null
    privatekeyLocation: null

    # File types that are allowed for deployment
    allowedFileTypes:
      - js
      - css
      - html
      - json
      - yaml
      - jpg
      - png
      - gif
      - md
      - mkd

    # Hash of domains to develop for:
    domainsToDevelop: {}
    help: ""

#      # Hostname to develop for:
#      gulpw-sample.somedomain.com:
#
#        # Servers where user can develop for `domainToDevelopFor` (in the case that this domain is the one chosen
#        # for development (in the `gulpw deploy-config` prompt then `domainToDevelopFor` is equal to the
#        # value of `gulpw-sample.somedomain.com`)
#        hostnames: # slots/hosts
#          - -devslot1.gulpw-sample.somedomain.com
#          - -devslot2.gulpw-sample.somedomain.com
#          - -devslot3.gulpw-sample.somedomain.com
#
#        # All website instance prefixes represent the same website just different
#        # instances of the website.
#
#        # Array of possible prefixes per `hostname` (in above `hostnames`)
#        hostnamePrefixes:
#          - web1
#          - web2
#          - web3
#
#        # If set will be passed to all/any of the following template vars: `deployRootFolder`,
#        # `deployRootFoldersByFileType[x]` (where `x` is the 'key' of a key within the hash map);
#        hostnamePrefixFolders: null
#          #web1: website1
#          #web2: website2
#          #web3: website3
#
#        # @note deployRoot quirk/caveat: All paths for deployRootFolder and it's file type variant must use absolute paths
#
#        # Root folder on the server to use for deployments (used as a prefix path for file paths being deployed)
#        # example: /home/some-user/sites/<%= hostnamePrefix %><%= hostname %> (recieves the `deploy` has from this config)
#        deployRootFolder: null
#
#        # Deploy roots by file types;  E.g., File types can have different deploy roots or can be deployed to
#        # any directory within the remote server's file system via this hash map.
#        #deployRootFoldersByFileType: null
#        #  jsp: ...
#        #  php: ...
#

#  develop:
#    tasks:
#      - open
#      - watch
#    livereload: null

  jasmine:
    constructorLocation: ./bundle/task-proxies/JasmineAdapter
    files: null # testDir or array of files (test files)
    options: null
    help: ""

  jshint:
    constructorLocation: ./bundle/task-proxies/JsHintAdapter
    jshintrc: ./configs/.jshintrc
    ignoreFiles: null
    options:
      predef:
        - $
        - _
        - amplify
        - Backbone
        - browserify
        - define
        - jQuery
        - Modernizr
        - Mustache
        - Marionette
        - require
        - sjl
    help: ""

  minify:
    constructorLocation: ./bundle/task-proxies/MinifyAdapter
    header: |
      /*! Company Name http://www.company-website.com <%= bundle.alias %>.js <%= bundle.version %> <%= bundle[section-name].md5 %> */
    cssBuildPath: some/path/to/build/path
    htmlBuildPath: some/path/to/build/path
    jsBuildPath: some/path/to/build/path
    allowedFileTypes:
      - js
      - css
      - html
    htmlTaskOptions:
      spare: true
      comments: false
    jsTaskOptions: {}
    useMinPreSuffix: false
    useVersionNumInFileName: false
    template:
      templatePartial: null
      compressWhitespace: true
      templateTypeKeys:
        - mustache
        - handlebars
        - ejs
    help: ""

  mocha:
    constructorLocation: ./bundle/task-proxies/MochaAdapter
    files: null # testDir or array of files (test files)
    options: null
    help: ""

  # RequireJs Defaults
  requirejs:
    constructorLocation: ./bundle/task-proxies/RequireJsAdapter
    help: ""

  # Watch Task Defaults
  watch:
    constructorLocation: ./bundle/task-proxies/WatchAdapter

    # Tasks to ignore on the bundle level (watch creates it's own
    # collection of deploy tasks from the bundle(s) registered with it)
    ignoredTasks:
      - clean
      - deploy

    # Tasks to run on file changes ** Note ** only tasks that match changed file types will be run
    tasks:
      - build
      - deploy

    # Other files to watch (can be overridden from the bundle level as well)
    otherFiles: null

    livereload: null

    help: ""


