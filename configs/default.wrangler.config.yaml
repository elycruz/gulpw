bundlesPath: ./path/to/bundles

bundleConfigFormats:
  - .yaml
  - .js
  - .json

localConfigPath: ./.gulpw

localConfigBackupPath: ./.gulpw/backups

staticTasks:
  "config": {}
  "deploy-config": {}
  "bundle-config": {}

tasks:

  all:
    tasks:
      - build
      - deploy

  # Browserify Defaults
  browserify: {}

  # Build Task (Looks through {bundle-alias}.yaml file and runs
  # all tasks that are not in the `ignoredTasks` array in this config.
  build:

    prelimTasks:
      - mocha
      - jasmine

    ignoredTasks:
      - clean
      - deploy
      - jshint
      - csslint

  clean:
    allowedFileTypes:
      - js
      - css
      - html

  compass:
    compassProjectRoot: null # config.rb home

  concat:
    header: |
      /*!
       * Company Name http://www.company-website.com
       * <%= bundle.alias %>.<%= fileExt %> <%= bundle.version %> (<%= (new Date()).getTime() %>)
       * <%= bundle[section-name].md5 %>
       */
    cssBuildDir: some/path/to/build/path
    jsBuildDir: some/path/to/build/path
    htmlBuildDir: some/path/to/build/path
    allowedFileTypes:
      - js
      - css
      - html
    useVersionNumInFileName: false
    template:
      templatePartial: null # script partial to render for each file entry in the `templates` hash.
      compressWhitespace: true
      templateTypeKeys:
        - mustache
        - handlebars
        - ejs

  copy: {}

  csslint:
      csslintrc: null

  # Deploy Task
  deploy:

    # Other files to be deployed
    otherFiles: []

    # Should files be linted before deploy
    lintBeforeDeploy: false

    deployUsingUnixStylePaths: true

    # Options written by `gulpw deploy-config`
    developingDomain: null
    hostnamePrefix: null
    hostname: null
    port: 22
    username: null
    password: null
    publickeyPassphrase: null
    privatekeyLocation: null

    # File types that are allowed for deployment
    allowedFileTypes:
      - js
      - css
      - html
      - json
      - yaml
      - jpg
      - png
      - gif
      - md
      - mkd

    # Hash of domains to develop for:
    domainsToDevelop:

#      # Hostname to develop for:
#      gulpw-sample.somedomain.com:
#
#        # Servers where user can develop for `domainToDevelopFor` (in the case that this domain is the one chosen
#        # for development (in the `gulpw deploy-config` prompt then `domainToDevelopFor` is equal to the
#        # value of `gulpw-sample.somedomain.com`)
#        hostnames: # slots/hosts
#          - -devslot1.gulpw-sample.somedomain.com
#          - -devslot2.gulpw-sample.somedomain.com
#          - -devslot3.gulpw-sample.somedomain.com
#
#        # All website instance prefixes represent the same website just different
#        # instances of the website.
#
#        # Array of possible prefixes per `hostname` (in above `hostnames`)
#        hostnamePrefixes:
#          - web1
#          - web2
#          - web3
#
#        # If set will be passed to all/any of the following template vars: `deployRootFolder`,
#        # `deployRootFoldersByFileType[x]` (where `x` is the 'key' of a key within the hash map);
#        hostnamePrefixFolders: null
#          #web1: website1
#          #web2: website2
#          #web3: website3
#
#        # Host name prefix folder (determined by `gulpw deploy-config`) can be set to a default though.
#        hostnamePrefixFolder: null
#
#        # Root folder on the server to use for deployments (used as a prefix path for file paths being deployed)
#        # example: sites/<%= hostnamePrefix %><%= hostname %> (recieves the `deploy` has from this config)
#        deployRootFolder: null
#
#        # Use deploy root folders by file type
#        useDeployRootFoldersByFileType: false,
#
#        # Deploy roots by file types;  E.g., File types can have different deploy roots or can be deployed to
#        # any directory within the remote server's file system via this hash map.
#        #deployRootFoldersByFileType: null
#        #  jsp: ...
#        #  php: ...
#

#  develop:
#    tasks:
#      - open
#      - watch
#    livereload: null

  jasmine:
    files: null # testDir or array of files (test files)
    options: null

  jshint:
    jshintrc: ./configs/.jshintrc
    ignoreFiles: null
    options:
      predef:
        - $
        - _
        - amplify
        - Backbone
        - browserify
        - define
        - jQuery
        - Modernizr
        - Mustache
        - Marionette
        - require
        - sjl

  minify:
    header: |
      /*! Company Name http://www.company-website.com <%= bundle.alias %>.js <%= bundle.version %> <%= bundle[section-name].md5 %> */
    cssBuildDir: some/path/to/build/path
    htmlBuildDir: some/path/to/build/path
    jsBuildDir: some/path/to/build/path
    allowedFileTypes:
      - js
      - css
      - html
    htmlTaskOptions:
      spare: true
      comments: false
    jsTaskOptions: {}
    useMinPreSuffix: false
    useVersionNumInFileName: false
    template:
      templatePartial: null
      compressWhitespace: true
      templateTypeKeys:
        - mustache
        - handlebars
        - ejs

  mocha:
    files: null # testDir or array of files (test files)
    options: null

  # RequireJs Defaults
  requirejs: {}

  # Watch Task Defaults
  watch:

    # Tasks to ignore on the bundle level (watch creates it's own
    # collection of deploy tasks from the bundle(s) registered with it)
    ignoredTasks:
      - clean
      - deploy

    # Tasks to run on file changes ** Note ** only tasks that match changed file types will be run
    tasks:
      - build
      - deploy

    # Other files to watch (can be overridden from the bundle level as well)
    otherFiles: null

    livereload:

